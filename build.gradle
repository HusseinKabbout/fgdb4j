group 'ch.ehi'
version '1.1.1'+System.getProperty('release','-SNAPSHOT')

apply plugin: "cpp"
apply plugin: "java"
apply plugin: "maven"

sourceCompatibility = "1.6"
targetCompatibility = "1.6"
compileJava.options.encoding = 'US-ASCII'
configurations {
    deployerJars
}

// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
    // check for updates every build
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}
dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ftp:3.0.0"
}

repositories {
    mavenLocal()
    maven {
        url "http://jars.interlis.ch"
    }
    mavenCentral()
}

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))
    
def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task nativelib(  ){
	
}


nativelib.dependsOn {
    tasks.findAll { task -> task.name.endsWith('SharedLibrary') }
}

jar.shouldRunAfter nativelib

task cleanGenSrc(type: Delete) {
  delete fileTree(dir: 'gensrc/cpp'),fileTree(dir: 'gensrc/java')
}

// "C:\program Files (x86)\swigwin-3.0.12\swig.exe" -o target\fgdb4j.cxx -oh target\fgdb4j.h -Iinclude -c++ -java -outdir target\src src\swig\fgdb4j.i
task generateSrc(type:Exec) {
  mkdir "gensrc/java/ch/ehi/fgdb4j/jni"
  executable "C:/program Files (x86)/swigwin-3.0.12/swig.exe"
  args "-o", "gensrc/cpp/fgdb4j.cxx"
  args "-oh", "gensrc/cpp/fgdb4j.h"
  args "-Iesriapi/include"
  args "-c++"
  //args "-debug-tmsearch"
  //args "-E" // ony pre-process
  args "-java"
  args "-outdir", "gensrc/java/ch/ehi/fgdb4j/jni"
  args "-package", "ch.ehi.fgdb4j.jni"
  args "src/swig/fgdb4j.i"
}

jar {
	from ("build/libs/fgdb4j/shared/x64/fgdb4j.dll") {
		into ("ch/ehi/fgdb4j/native/Windows/x86_64")
		rename 'fgdb4jnative.dll','fgdb4j.dll'
	}
	from ("esriapi/bin64/FileGDBAPI.dll"){
		into ("ch/ehi/fgdb4j/native/Windows/x86_64")
	}
	from ("build/libs/fgdb4j/shared/x86/fgdb4j.dll") {
		into ("ch/ehi/fgdb4j/native/Windows/x86")
		rename 'fgdb4jnative.dll','fgdb4j.dll'
	}
	from ("esriapi/bin/FileGDBAPI.dll"){
		into ("ch/ehi/fgdb4j/native/Windows/x86")
	}
	
}
sourceSets {
    main {
		//let's register an output folder on the main SourceSet:
		//it is now a part of the 'main' classpath and will be a part of the jar
		output.dir(generatedResources, builtBy: 'generateMyResources')
        java {
            srcDirs = ['gensrc/java','src/java']
        }
        resources {
            srcDirs = ['src/java','gensrc/native']
        }
    }
}
task generateMyResources {
	doLast {
		def versionProps = new Properties()
		versionProps.setProperty('version', "$project.version")
		versionProps.setProperty('versionCommit', getGitHash())
		def versionPropsFile = new File(generatedResources,"ch/ehi/fgdb4j/Version.properties")
		versionPropsFile.getParentFile().mkdirs();
		versionProps.store(versionPropsFile.newWriter(), null);
	}
}

model {
    buildTypes {
          release
    }
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        } 
    }
    components {
        fgdb4j(NativeLibrarySpec){
            targetPlatform "x64"
            targetPlatform "x86"
	    sources {
		    cpp {
			source {
			    srcDir "gensrc/cpp"
			    include "**/*.cxx"
			}
		    }
	    }
	    binaries.all {
		    if (toolChain in VisualCpp) {
			cppCompiler.args "-I"+new File("jdk/include").getAbsolutePath()
			cppCompiler.args "-I"+new File("jdk/include/win32").getAbsolutePath()
			cppCompiler.args "-I"+new File("esriapi/include").getAbsolutePath()
			cppCompiler.args "-I"+new File("src/swig").getAbsolutePath()
		      // cCompiler.args "/Zi"
			// cCompiler.define "DLL_EXPORT"
			linker.args "/LIBPATH:"+new File("esriapi/lib${targetPlatform.name == 'x64'?'64':''}").getAbsolutePath()
			linker.args "FileGDBAPI.lib"
		    }
	    }    
	    binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }        
        }
    }
}
// use plugin 'maven' instead of 'maven-publish', 
// because 'maven-publish' doesn't support ftp repository access
artifacts {
    archives(jar.archivePath){
    	builtBy jar
    }
}
uploadArchives {
    repositories {
        mavenDeployer {
        	configuration = configurations.deployerJars
			repository(url: 'ftp://ftp.interlis.ch'){
            	authentication(userName: repos_usr, password: repos_pwd)
            }
    	}
    }
}
