/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <ctime>
#include "FileGDBAPI.h"
#include "ce_time.h"


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector< FileGDBAPI::FieldDef >::const_reference std_vector_Sl_FileGDBAPI_FieldDef_Sg__get(std::vector< FileGDBAPI::FieldDef > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_FileGDBAPI_FieldDef_Sg__set(std::vector< FileGDBAPI::FieldDef > *self,int i,std::vector< FileGDBAPI::FieldDef >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< FileGDBAPI::IndexDef >::const_reference std_vector_Sl_FileGDBAPI_IndexDef_Sg__get(std::vector< FileGDBAPI::IndexDef > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_FileGDBAPI_IndexDef_Sg__set(std::vector< FileGDBAPI::IndexDef > *self,int i,std::vector< FileGDBAPI::IndexDef >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN int FileGDBAPI_Row_setDateTime__SWIG_0(FileGDBAPI::Row *self,std::wstring const &field,ce_time const &in){
		struct tm tmp;
		tmp.tm_sec=in.tm_sec;
		tmp.tm_min=in.tm_min;	
		tmp.tm_hour=in.tm_hour;	
		tmp.tm_mday=in.tm_mday;	
		tmp.tm_mon=in.tm_mon;	
		tmp.tm_year=in.tm_year;		
		tmp.tm_wday=in.tm_wday;	
		tmp.tm_yday=in.tm_yday;	
		tmp.tm_isdst=in.tm_isdst;	
		return self->SetDate(field,tmp);
	}
SWIGINTERN int FileGDBAPI_Row_setDateTime__SWIG_1(FileGDBAPI::Row *self,int fieldNumber,ce_time const &in){
		struct tm tmp;
		tmp.tm_sec=in.tm_sec;
		tmp.tm_min=in.tm_min;	
		tmp.tm_hour=in.tm_hour;	
		tmp.tm_mday=in.tm_mday;	
		tmp.tm_mon=in.tm_mon;	
		tmp.tm_year=in.tm_year;		
		tmp.tm_wday=in.tm_wday;	
		tmp.tm_yday=in.tm_yday;	
		tmp.tm_isdst=in.tm_isdst;	
		return self->SetDate(fieldNumber,tmp);
	}
SWIGINTERN int FileGDBAPI_Row_getDateTime__SWIG_0(FileGDBAPI::Row *self,std::wstring const &field,ce_time &out){
		struct tm tmp;
		int ret=self->GetDate(field,tmp);
		out.tm_sec=tmp.tm_sec;
		out.tm_min=tmp.tm_min;	
		out.tm_hour=tmp.tm_hour;	
		out.tm_mday=tmp.tm_mday;	
		out.tm_mon=tmp.tm_mon;	
		out.tm_year=tmp.tm_year;		
		out.tm_wday=tmp.tm_wday;	
		out.tm_yday=tmp.tm_yday;	
		out.tm_isdst=tmp.tm_isdst;	
		return ret;
	}
SWIGINTERN int FileGDBAPI_Row_getDateTime__SWIG_1(FileGDBAPI::Row *self,int fieldNumber,ce_time &out){
		struct tm tmp;
		int ret=self->GetDate(fieldNumber,tmp);
		out.tm_sec=tmp.tm_sec;
		out.tm_min=tmp.tm_min;	
		out.tm_hour=tmp.tm_hour;	
		out.tm_mday=tmp.tm_mday;	
		out.tm_mon=tmp.tm_mon;	
		out.tm_year=tmp.tm_year;		
		out.tm_wday=tmp.tm_wday;	
		out.tm_yday=tmp.tm_yday;	
		out.tm_isdst=tmp.tm_isdst;	
		return ret;
	}
SWIGINTERN void FileGDBAPI_ShapeBuffer_setBuffer(FileGDBAPI::ShapeBuffer *self,byte *ShapeBufferIN){
	}
SWIGINTERN byte *FileGDBAPI_ShapeBuffer_getBuffer(FileGDBAPI::ShapeBuffer *self){
		return self->shapeBuffer;
	}
SWIGINTERN void FileGDBAPI_ByteArray_setBuffer(FileGDBAPI::ByteArray *self,byte *ByteArrayIN){
	}
SWIGINTERN byte *FileGDBAPI_ByteArray_getBuffer(FileGDBAPI::ByteArray *self){
		return self->byteArray;
	}

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1FieldDefs_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::FieldDef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< FileGDBAPI::FieldDef > *)new std::vector< FileGDBAPI::FieldDef >();
  *(std::vector< FileGDBAPI::FieldDef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1FieldDefs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::FieldDef >::size_type arg1 ;
  std::vector< FileGDBAPI::FieldDef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< FileGDBAPI::FieldDef >::size_type)jarg1; 
  result = (std::vector< FileGDBAPI::FieldDef > *)new std::vector< FileGDBAPI::FieldDef >(arg1);
  *(std::vector< FileGDBAPI::FieldDef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDefs_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::FieldDef > *arg1 = (std::vector< FileGDBAPI::FieldDef > *) 0 ;
  std::vector< FileGDBAPI::FieldDef >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg1; 
  result = ((std::vector< FileGDBAPI::FieldDef > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDefs_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::FieldDef > *arg1 = (std::vector< FileGDBAPI::FieldDef > *) 0 ;
  std::vector< FileGDBAPI::FieldDef >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg1; 
  result = ((std::vector< FileGDBAPI::FieldDef > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDefs_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< FileGDBAPI::FieldDef > *arg1 = (std::vector< FileGDBAPI::FieldDef > *) 0 ;
  std::vector< FileGDBAPI::FieldDef >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg1; 
  arg2 = (std::vector< FileGDBAPI::FieldDef >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDefs_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< FileGDBAPI::FieldDef > *arg1 = (std::vector< FileGDBAPI::FieldDef > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg1; 
  result = (bool)((std::vector< FileGDBAPI::FieldDef > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDefs_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< FileGDBAPI::FieldDef > *arg1 = (std::vector< FileGDBAPI::FieldDef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDefs_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< FileGDBAPI::FieldDef > *arg1 = (std::vector< FileGDBAPI::FieldDef > *) 0 ;
  std::vector< FileGDBAPI::FieldDef >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg1; 
  arg2 = *(std::vector< FileGDBAPI::FieldDef >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FileGDBAPI::FieldDef >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< FileGDBAPI::FieldDef >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDefs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::FieldDef > *arg1 = (std::vector< FileGDBAPI::FieldDef > *) 0 ;
  int arg2 ;
  std::vector< FileGDBAPI::FieldDef >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FileGDBAPI::FieldDef >::value_type *) &std_vector_Sl_FileGDBAPI_FieldDef_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< FileGDBAPI::FieldDef >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDefs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< FileGDBAPI::FieldDef > *arg1 = (std::vector< FileGDBAPI::FieldDef > *) 0 ;
  int arg2 ;
  std::vector< FileGDBAPI::FieldDef >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< FileGDBAPI::FieldDef >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FileGDBAPI::FieldDef >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_FileGDBAPI_FieldDef_Sg__set(arg1,arg2,(FileGDBAPI::FieldDef const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1FieldDefs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< FileGDBAPI::FieldDef > *arg1 = (std::vector< FileGDBAPI::FieldDef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1IndexDefs_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::IndexDef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< FileGDBAPI::IndexDef > *)new std::vector< FileGDBAPI::IndexDef >();
  *(std::vector< FileGDBAPI::IndexDef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1IndexDefs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::IndexDef >::size_type arg1 ;
  std::vector< FileGDBAPI::IndexDef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< FileGDBAPI::IndexDef >::size_type)jarg1; 
  result = (std::vector< FileGDBAPI::IndexDef > *)new std::vector< FileGDBAPI::IndexDef >(arg1);
  *(std::vector< FileGDBAPI::IndexDef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDefs_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::IndexDef > *arg1 = (std::vector< FileGDBAPI::IndexDef > *) 0 ;
  std::vector< FileGDBAPI::IndexDef >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg1; 
  result = ((std::vector< FileGDBAPI::IndexDef > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDefs_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::IndexDef > *arg1 = (std::vector< FileGDBAPI::IndexDef > *) 0 ;
  std::vector< FileGDBAPI::IndexDef >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg1; 
  result = ((std::vector< FileGDBAPI::IndexDef > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDefs_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< FileGDBAPI::IndexDef > *arg1 = (std::vector< FileGDBAPI::IndexDef > *) 0 ;
  std::vector< FileGDBAPI::IndexDef >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg1; 
  arg2 = (std::vector< FileGDBAPI::IndexDef >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDefs_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< FileGDBAPI::IndexDef > *arg1 = (std::vector< FileGDBAPI::IndexDef > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg1; 
  result = (bool)((std::vector< FileGDBAPI::IndexDef > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDefs_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< FileGDBAPI::IndexDef > *arg1 = (std::vector< FileGDBAPI::IndexDef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDefs_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< FileGDBAPI::IndexDef > *arg1 = (std::vector< FileGDBAPI::IndexDef > *) 0 ;
  std::vector< FileGDBAPI::IndexDef >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg1; 
  arg2 = *(std::vector< FileGDBAPI::IndexDef >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FileGDBAPI::IndexDef >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< FileGDBAPI::IndexDef >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDefs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< FileGDBAPI::IndexDef > *arg1 = (std::vector< FileGDBAPI::IndexDef > *) 0 ;
  int arg2 ;
  std::vector< FileGDBAPI::IndexDef >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FileGDBAPI::IndexDef >::value_type *) &std_vector_Sl_FileGDBAPI_IndexDef_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< FileGDBAPI::IndexDef >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDefs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< FileGDBAPI::IndexDef > *arg1 = (std::vector< FileGDBAPI::IndexDef > *) 0 ;
  int arg2 ;
  std::vector< FileGDBAPI::IndexDef >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< FileGDBAPI::IndexDef >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FileGDBAPI::IndexDef >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_FileGDBAPI_IndexDef_Sg__set(arg1,arg2,(FileGDBAPI::IndexDef const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1IndexDefs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< FileGDBAPI::IndexDef > *arg1 = (std::vector< FileGDBAPI::IndexDef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_CreateGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::Geodatabase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  result = (fgdbError)FileGDBAPI::CreateGeodatabase((std::wstring const &)*arg1,*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_OpenGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::Geodatabase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  result = (fgdbError)FileGDBAPI::OpenGeodatabase((std::wstring const &)*arg1,*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_CloseGeodatabase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  result = (fgdbError)FileGDBAPI::CloseGeodatabase(*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_DeleteGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (fgdbError)FileGDBAPI::DeleteGeodatabase((std::wstring const &)*arg1);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetDatasetTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::vector< std::wstring > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(std::vector< std::wstring > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetDatasetTypes(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetDatasetRelationshipTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::vector< std::wstring > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(std::vector< std::wstring > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetDatasetRelationshipTypes(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetChildDatasets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::vector< std::wstring > *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(std::vector< std::wstring > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetChildDatasets((std::wstring const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetRelatedDatasets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::vector< std::wstring > *arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = *(std::vector< std::wstring > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetRelatedDatasets((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,*arg5);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  {
    
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetDatasetDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::string *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    arg4 = NULL;
    if(jarg4 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg4);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg4, toStringID);
      
      /* Convert the String to a C string */
      const char *pCharStr = jenv->GetStringUTFChars(js, 0);
      
      /* Take a copy of the C string as the typemap is for a non const C string */
      //jmethodID capacityID = jenv->GetMethodID(jenv, sbufClass, "capacity", "()I");
      //jint capacity = jenv->CallIntMethod(jenv, jarg4, capacityID);
      std::string arg4_str;
      arg4_str.assign(pCharStr);
      arg4=&arg4_str;
      
      /* Release the UTF string we obtained with GetStringUTFChars */
      jenv->ReleaseStringUTFChars(js, pCharStr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg4, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetDatasetDefinition((std::wstring const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  {
    if(arg4 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg4->data());
      jclass sbufClass = jenv->GetObjectClass(jarg4);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg4, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg4 = NULL;
    }  
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetChildDatasetDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(std::vector< std::string > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetChildDatasetDefinitions((std::wstring const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetRelatedDatasetDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::vector< std::string > *arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = *(std::vector< std::string > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetRelatedDatasetDefinitions((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,*arg5);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  {
    
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetDatasetDocumentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::string *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    arg4 = NULL;
    if(jarg4 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg4);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg4, toStringID);
      
      /* Convert the String to a C string */
      const char *pCharStr = jenv->GetStringUTFChars(js, 0);
      
      /* Take a copy of the C string as the typemap is for a non const C string */
      //jmethodID capacityID = jenv->GetMethodID(jenv, sbufClass, "capacity", "()I");
      //jint capacity = jenv->CallIntMethod(jenv, jarg4, capacityID);
      std::string arg4_str;
      arg4_str.assign(pCharStr);
      arg4=&arg4_str;
      
      /* Release the UTF string we obtained with GetStringUTFChars */
      jenv->ReleaseStringUTFChars(js, pCharStr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg4, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetDatasetDocumentation((std::wstring const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  {
    if(arg4 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg4->data());
      jclass sbufClass = jenv->GetObjectClass(jarg4);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg4, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg4 = NULL;
    }  
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1CreateFeatureDataset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->CreateFeatureDataset((std::string const &)*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1CreateFeatureDataset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::SpatialReference *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::SpatialReference **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReference const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->CreateFeatureDataset((std::wstring const &)*arg2,(FileGDBAPI::SpatialReference const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1CreateTable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  FileGDBAPI::Table *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(FileGDBAPI::Table **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Table & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->CreateTable((std::string const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1CreateTable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::vector< FileGDBAPI::FieldDef > *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  FileGDBAPI::Table *arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FileGDBAPI::FieldDef > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = *(FileGDBAPI::Table **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Table & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->CreateTable((std::wstring const &)*arg2,(std::vector< FileGDBAPI::FieldDef > const &)*arg3,(std::wstring const &)*arg4,*arg5);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1OpenTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Table *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Table **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Table & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->OpenTable((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1CloseTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  FileGDBAPI::Table *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(FileGDBAPI::Table **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Table & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->CloseTable(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1Rename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (fgdbError)(arg1)->Rename((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  {
    
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1Move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (fgdbError)(arg1)->Move((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (fgdbError)(arg1)->Delete((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1CompactDatabase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  result = (fgdbError)(arg1)->CompactDatabase();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetDomains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::vector< std::wstring > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(std::vector< std::wstring > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetDomains(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1CreateDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->CreateDomain((std::string const &)*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1AlterDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AlterDomain((std::string const &)*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1DeleteDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->DeleteDomain((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetDomainDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    arg3 = NULL;
    if(jarg3 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg3, toStringID);
      
      /* Convert the String to a C string */
      const char *pCharStr = jenv->GetStringUTFChars(js, 0);
      
      /* Take a copy of the C string as the typemap is for a non const C string */
      //jmethodID capacityID = jenv->GetMethodID(jenv, sbufClass, "capacity", "()I");
      //jint capacity = jenv->CallIntMethod(jenv, jarg3, capacityID);
      std::string arg3_str;
      arg3_str.assign(pCharStr);
      arg3=&arg3_str;
      
      /* Release the UTF string we obtained with GetStringUTFChars */
      jenv->ReleaseStringUTFChars(js, pCharStr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg3, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetDomainDefinition((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg3->data());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg3 = NULL;
    }  
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1GetQueryName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    arg3 = NULL;
    if(jarg3 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg3, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg3_pstr = jenv->GetStringChars(js, 0);
      jint arg3_len = jenv->GetStringLength(js);
      std::wstring arg3_str;
      if (arg3_len) {
        arg3_str.reserve(arg3_len);
        for (jsize i = 0; i < arg3_len; ++i) {
          arg3_str.push_back((wchar_t)arg3_pstr[i]);
        }
      }
      
      arg3 = &arg3_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg3_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg3, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->GetQueryName((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg3->data(),arg3->length());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
    }  
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Geodatabase_1ExecuteSQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  bool arg3 ;
  FileGDBAPI::EnumRows *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  arg4 = *(FileGDBAPI::EnumRows **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::EnumRows & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Geodatabase const *)arg1)->ExecuteSQL((std::wstring const &)*arg2,arg3,*arg4);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1Geodatabase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Geodatabase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Geodatabase *)new FileGDBAPI::Geodatabase();
  *(FileGDBAPI::Geodatabase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1Geodatabase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1GetDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    arg2 = NULL;
    if(jarg2 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg2, toStringID);
      
      /* Convert the String to a C string */
      const char *pCharStr = jenv->GetStringUTFChars(js, 0);
      
      /* Take a copy of the C string as the typemap is for a non const C string */
      //jmethodID capacityID = jenv->GetMethodID(jenv, sbufClass, "capacity", "()I");
      //jint capacity = jenv->CallIntMethod(jenv, jarg2, capacityID);
      std::string arg2_str;
      arg2_str.assign(pCharStr);
      arg2=&arg2_str;
      
      /* Release the UTF string we obtained with GetStringUTFChars */
      jenv->ReleaseStringUTFChars(js, pCharStr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg2, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Table const *)arg1)->GetDefinition(*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1GetDocumentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    arg2 = NULL;
    if(jarg2 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg2, toStringID);
      
      /* Convert the String to a C string */
      const char *pCharStr = jenv->GetStringUTFChars(js, 0);
      
      /* Take a copy of the C string as the typemap is for a non const C string */
      //jmethodID capacityID = jenv->GetMethodID(jenv, sbufClass, "capacity", "()I");
      //jint capacity = jenv->CallIntMethod(jenv, jarg2, capacityID);
      std::string arg2_str;
      arg2_str.assign(pCharStr);
      arg2=&arg2_str;
      
      /* Release the UTF string we obtained with GetStringUTFChars */
      jenv->ReleaseStringUTFChars(js, pCharStr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg2, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Table const *)arg1)->GetDocumentation(*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1SetDocumentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->SetDocumentation((std::string const &)*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1GetFieldInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::FieldInfo *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldInfo & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Table const *)arg1)->GetFieldInformation(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1GetFields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::vector< FileGDBAPI::FieldDef > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FileGDBAPI::FieldDef > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Table const *)arg1)->GetFields(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1AddField_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AddField((std::string const &)*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1AddField_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::FieldDef *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldDef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldDef const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->AddField((FileGDBAPI::FieldDef const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1AlterField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AlterField((std::string const &)*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1DeleteField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->DeleteField((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1GetIndexes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Table const *)arg1)->GetIndexes(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1GetIndexes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::vector< FileGDBAPI::IndexDef > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(std::vector< FileGDBAPI::IndexDef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FileGDBAPI::IndexDef > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Table const *)arg1)->GetIndexes(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1AddIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AddIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1AddIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::IndexDef *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::IndexDef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::IndexDef const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->AddIndex((FileGDBAPI::IndexDef const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1DeleteIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->DeleteIndex((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1CreateSubtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->CreateSubtype((std::string const &)*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1AlterSubtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AlterSubtype((std::string const &)*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg2->data());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg2 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1DeleteSubtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->DeleteSubtype((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1EnableSubtypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (fgdbError)(arg1)->EnableSubtypes((std::wstring const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg3->data());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg3 = NULL;
    }  
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1GetDefaultSubtypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::Table const *)arg1)->GetDefaultSubtypeCode(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1SetDefaultSubtypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  int arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (fgdbError)(arg1)->SetDefaultSubtypeCode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1DisableSubtypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  result = (fgdbError)(arg1)->DisableSubtypes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1Search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  FileGDBAPI::Envelope *arg4 = 0 ;
  bool arg5 ;
  FileGDBAPI::EnumRows *arg6 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(FileGDBAPI::Envelope **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Envelope const & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = *(FileGDBAPI::EnumRows **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::EnumRows & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Search((std::wstring const &)*arg2,(std::wstring const &)*arg3,(FileGDBAPI::Envelope const &)*arg4,arg5,*arg6);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1Search_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  bool arg4 ;
  FileGDBAPI::EnumRows *arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = jarg4 ? true : false; 
  arg5 = *(FileGDBAPI::EnumRows **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::EnumRows & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Search((std::wstring const &)*arg2,(std::wstring const &)*arg3,arg4,*arg5);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1CreateRowObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->CreateRowObject(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1Insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Insert(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Update(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Delete(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1IsEditable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->IsEditable(*arg2);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1GetRowCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::Table const *)arg1)->GetRowCount(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1GetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Envelope *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Envelope **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Envelope & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Table const *)arg1)->GetExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1SetWriteLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  result = (fgdbError)(arg1)->SetWriteLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1FreeWriteLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  result = (fgdbError)(arg1)->FreeWriteLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Table_1LoadOnlyMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  bool arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (fgdbError)(arg1)->LoadOnlyMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1Table(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Table *)new FileGDBAPI::Table();
  *(FileGDBAPI::Table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1Table(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1IsNull_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jbooleanArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = false;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->IsNull((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    jboolean jvalue = (jboolean)temp3;
    jenv->SetBooleanArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1IsNull_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbooleanArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = false;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->IsNull(arg2,*arg3);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp3;
    jenv->SetBooleanArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetNull_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->SetNull((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetNull_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (fgdbError)(arg1)->SetNull(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetOID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int32 *arg2 = 0 ;
  int32 temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int32)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetOID(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetGlobalID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::Guid *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::Guid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetGlobalID(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::ShapeBuffer *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::ShapeBuffer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ShapeBuffer & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetGeometry(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::ShapeBuffer *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::ShapeBuffer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ShapeBuffer const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetGeometry((FileGDBAPI::ShapeBuffer const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetShort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshortArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  short *arg3 = 0 ;
  short temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (short)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetShort((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    jshort jvalue = (jshort)temp3;
    jenv->SetShortArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetShort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshortArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (short)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetShort(arg2,*arg3);
  jresult = (jint)result; 
  {
    jshort jvalue = (jshort)temp3;
    jenv->SetShortArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetShort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  short arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (short)jarg3; 
  result = (fgdbError)(arg1)->SetShort((std::wstring const &)*arg2,arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetShort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  short arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (short)jarg3; 
  result = (fgdbError)(arg1)->SetShort(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetInteger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jintArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  int32 *arg3 = 0 ;
  int32 temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (int32)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetInteger((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetInteger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jintArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  int32 *arg3 = 0 ;
  int32 temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (int32)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetInteger(arg2,*arg3);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetInteger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  int32 arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (int32)jarg3; 
  result = (fgdbError)(arg1)->SetInteger((std::wstring const &)*arg2,arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetInteger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  int32 arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int32)jarg3; 
  result = (fgdbError)(arg1)->SetInteger(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloatArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (float)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetFloat((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    jfloat jvalue = (jfloat)temp3;
    jenv->SetFloatArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (float)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetFloat(arg2,*arg3);
  jresult = (jint)result; 
  {
    jfloat jvalue = (jfloat)temp3;
    jenv->SetFloatArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  float arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (float)jarg3; 
  result = (fgdbError)(arg1)->SetFloat((std::wstring const &)*arg2,arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  float arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (fgdbError)(arg1)->SetFloat(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetDouble((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetDouble(arg2,*arg3);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  double arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (double)jarg3; 
  result = (fgdbError)(arg1)->SetDouble((std::wstring const &)*arg2,arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  double arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (fgdbError)(arg1)->SetDouble(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetDate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  tm *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(tm **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tm & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetDate((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetDate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  tm *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(tm **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tm & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetDate(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetDate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  tm *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(tm **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tm const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetDate((std::wstring const &)*arg2,(tm const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetDate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  tm *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(tm **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tm const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetDate(arg2,(tm const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    arg3 = NULL;
    if(jarg3 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg3, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg3_pstr = jenv->GetStringChars(js, 0);
      jint arg3_len = jenv->GetStringLength(js);
      std::wstring arg3_str;
      if (arg3_len) {
        arg3_str.reserve(arg3_len);
        for (jsize i = 0; i < arg3_len; ++i) {
          arg3_str.push_back((wchar_t)arg3_pstr[i]);
        }
      }
      
      arg3 = &arg3_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg3_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg3, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetString((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg3->data(),arg3->length());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
    }  
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    arg3 = NULL;
    if(jarg3 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg3, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg3_pstr = jenv->GetStringChars(js, 0);
      jint arg3_len = jenv->GetStringLength(js);
      std::wstring arg3_str;
      if (arg3_len) {
        arg3_str.reserve(arg3_len);
        for (jsize i = 0; i < arg3_len; ++i) {
          arg3_str.push_back((wchar_t)arg3_pstr[i]);
        }
      }
      
      arg3 = &arg3_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg3_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg3, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetString(arg2,*arg3);
  jresult = (jint)result; 
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg3->data(),arg3->length());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (fgdbError)(arg1)->SetString((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (fgdbError)(arg1)->SetString(arg2,(std::wstring const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetGUID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Guid *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Guid **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetGUID((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetGUID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  FileGDBAPI::Guid *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FileGDBAPI::Guid **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetGUID(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetGUID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Guid *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Guid **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetGUID((std::wstring const &)*arg2,(FileGDBAPI::Guid const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetGUID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  FileGDBAPI::Guid *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FileGDBAPI::Guid **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetGUID(arg2,(FileGDBAPI::Guid const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetXML_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    arg3 = NULL;
    if(jarg3 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg3, toStringID);
      
      /* Convert the String to a C string */
      const char *pCharStr = jenv->GetStringUTFChars(js, 0);
      
      /* Take a copy of the C string as the typemap is for a non const C string */
      //jmethodID capacityID = jenv->GetMethodID(jenv, sbufClass, "capacity", "()I");
      //jint capacity = jenv->CallIntMethod(jenv, jarg3, capacityID);
      std::string arg3_str;
      arg3_str.assign(pCharStr);
      arg3=&arg3_str;
      
      /* Release the UTF string we obtained with GetStringUTFChars */
      jenv->ReleaseStringUTFChars(js, pCharStr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg3, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetXML((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg3->data());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg3 = NULL;
    }  
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetXML_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    arg3 = NULL;
    if(jarg3 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg3, toStringID);
      
      /* Convert the String to a C string */
      const char *pCharStr = jenv->GetStringUTFChars(js, 0);
      
      /* Take a copy of the C string as the typemap is for a non const C string */
      //jmethodID capacityID = jenv->GetMethodID(jenv, sbufClass, "capacity", "()I");
      //jint capacity = jenv->CallIntMethod(jenv, jarg3, capacityID);
      std::string arg3_str;
      arg3_str.assign(pCharStr);
      arg3=&arg3_str;
      
      /* Release the UTF string we obtained with GetStringUTFChars */
      jenv->ReleaseStringUTFChars(js, pCharStr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg3, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetXML(arg2,*arg3);
  jresult = (jint)result; 
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg3->data());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg3 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetXML_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (fgdbError)(arg1)->SetXML((std::wstring const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg3->data());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg3 = NULL;
    }  
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetXML_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (fgdbError)(arg1)->SetXML(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewStringUTF(arg3->data());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
      
      /* Clean up the string object, no longer needed */
      arg3 = NULL;
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetRaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Raster *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Raster **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Raster & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetRaster((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetRaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Raster *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Raster **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Raster const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetRaster((std::wstring const &)*arg2,(FileGDBAPI::Raster const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::ByteArray *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::ByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ByteArray & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetBinary((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  FileGDBAPI::ByteArray *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FileGDBAPI::ByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ByteArray & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetBinary(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::ByteArray *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::ByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ByteArray const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetBinary((std::wstring const &)*arg2,(FileGDBAPI::ByteArray const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1SetBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  FileGDBAPI::ByteArray *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FileGDBAPI::ByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ByteArray const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetBinary(arg2,(FileGDBAPI::ByteArray const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetFieldInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::FieldInfo *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldInfo & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetFieldInformation(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1GetFields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::vector< FileGDBAPI::FieldDef > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FileGDBAPI::FieldDef > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::Row const *)arg1)->GetFields(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1Row(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Row *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Row *)new FileGDBAPI::Row();
  *(FileGDBAPI::Row **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1Row(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1setDateTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  ce_time *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(ce_time **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ce_time const & reference is null");
    return 0;
  } 
  result = (int)FileGDBAPI_Row_setDateTime__SWIG_0(arg1,(std::wstring const &)*arg2,(ce_time const &)*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1setDateTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  ce_time *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(ce_time **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ce_time const & reference is null");
    return 0;
  } 
  result = (int)FileGDBAPI_Row_setDateTime__SWIG_1(arg1,arg2,(ce_time const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1getDateTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  ce_time *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(ce_time **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ce_time & reference is null");
    return 0;
  } 
  result = (int)FileGDBAPI_Row_getDateTime__SWIG_0(arg1,(std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Row_1getDateTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int arg2 ;
  ce_time *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(ce_time **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ce_time & reference is null");
    return 0;
  } 
  result = (int)FileGDBAPI_Row_getDateTime__SWIG_1(arg1,arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EnumRows_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Next(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EnumRows_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  (arg1)->Close();
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EnumRows_1GetFieldInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  FileGDBAPI::FieldInfo *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldInfo & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::EnumRows const *)arg1)->GetFieldInformation(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EnumRows_1GetFields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  std::vector< FileGDBAPI::FieldDef > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  arg2 = *(std::vector< FileGDBAPI::FieldDef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FileGDBAPI::FieldDef > & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::EnumRows const *)arg1)->GetFields(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1EnumRows(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::EnumRows *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::EnumRows *)new FileGDBAPI::EnumRows();
  *(FileGDBAPI::EnumRows **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1EnumRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1SpatialReference(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::SpatialReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::SpatialReference *)new FileGDBAPI::SpatialReference();
  *(FileGDBAPI::SpatialReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1SpatialReference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetSpatialReferenceText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    arg2 = NULL;
    if(jarg2 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg2, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg2_pstr = jenv->GetStringChars(js, 0);
      jint arg2_len = jenv->GetStringLength(js);
      std::wstring arg2_str;
      if (arg2_len) {
        arg2_str.reserve(arg2_len);
        for (jsize i = 0; i < arg2_len; ++i) {
          arg2_str.push_back((wchar_t)arg2_pstr[i]);
        }
      }
      
      arg2 = &arg2_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg2_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg2, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::SpatialReference const *)arg1)->GetSpatialReferenceText(*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg2->data(),arg2->length());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetSpatialReferenceText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->SetSpatialReferenceText((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetSpatialReferenceID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->GetSpatialReferenceID(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetSpatialReferenceID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  int arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (fgdbError)(arg1)->SetSpatialReferenceID(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetXYFalseOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp2 ;
  double temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)(arg1)->GetXYFalseOrigin(*arg2,*arg3);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetXYFalseOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double arg2 ;
  double arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (fgdbError)(arg1)->SetXYFalseOrigin(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetXYResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->GetXYResolution(*arg2);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetXYResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (fgdbError)(arg1)->SetXYResolution(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetXYTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->GetXYTolerance(*arg2);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetXYTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (fgdbError)(arg1)->SetXYTolerance(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetZFalseOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->GetZFalseOrigin(*arg2);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetZFalseOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (fgdbError)(arg1)->SetZFalseOrigin(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetZResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->GetZResolution(*arg2);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetZResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (fgdbError)(arg1)->SetZResolution(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetZTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->GetZTolerance(*arg2);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetZTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (fgdbError)(arg1)->SetZTolerance(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetMFalseOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->GetMFalseOrigin(*arg2);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetMFalseOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (fgdbError)(arg1)->SetMFalseOrigin(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetMResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->GetMResolution(*arg2);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetMResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (fgdbError)(arg1)->SetMResolution(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1GetMTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)(arg1)->GetMTolerance(*arg2);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReference_1SetMTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReference *arg1 = (FileGDBAPI::SpatialReference *) 0 ;
  double arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReference **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (fgdbError)(arg1)->SetMTolerance(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1GeometryDef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::GeometryDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::GeometryDef *)new FileGDBAPI::GeometryDef();
  *(FileGDBAPI::GeometryDef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1GeometryDef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::GeometryDef *arg1 = (FileGDBAPI::GeometryDef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::GeometryDef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GeometryDef_1GetGeometryType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::GeometryDef *arg1 = (FileGDBAPI::GeometryDef *) 0 ;
  FileGDBAPI::GeometryType *arg2 = 0 ;
  FileGDBAPI::GeometryType temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::GeometryDef **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (FileGDBAPI::GeometryType)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::GeometryDef const *)arg1)->GetGeometryType(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GeometryDef_1SetGeometryType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::GeometryDef *arg1 = (FileGDBAPI::GeometryDef *) 0 ;
  FileGDBAPI::GeometryType arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::GeometryDef **)&jarg1; 
  arg2 = (FileGDBAPI::GeometryType)jarg2; 
  result = (fgdbError)(arg1)->SetGeometryType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GeometryDef_1GetHasZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::GeometryDef *arg1 = (FileGDBAPI::GeometryDef *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::GeometryDef **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::GeometryDef const *)arg1)->GetHasZ(*arg2);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GeometryDef_1SetHasZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::GeometryDef *arg1 = (FileGDBAPI::GeometryDef *) 0 ;
  bool arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::GeometryDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (fgdbError)(arg1)->SetHasZ(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GeometryDef_1GetHasM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::GeometryDef *arg1 = (FileGDBAPI::GeometryDef *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::GeometryDef **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::GeometryDef const *)arg1)->GetHasM(*arg2);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GeometryDef_1SetHasM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::GeometryDef *arg1 = (FileGDBAPI::GeometryDef *) 0 ;
  bool arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::GeometryDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (fgdbError)(arg1)->SetHasM(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GeometryDef_1GetSpatialReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::GeometryDef *arg1 = (FileGDBAPI::GeometryDef *) 0 ;
  FileGDBAPI::SpatialReference *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::GeometryDef **)&jarg1; 
  arg2 = *(FileGDBAPI::SpatialReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReference & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::GeometryDef const *)arg1)->GetSpatialReference(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GeometryDef_1SetSpatialReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::GeometryDef *arg1 = (FileGDBAPI::GeometryDef *) 0 ;
  FileGDBAPI::SpatialReference *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::GeometryDef **)&jarg1; 
  arg2 = *(FileGDBAPI::SpatialReference **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReference const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetSpatialReference((FileGDBAPI::SpatialReference const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1FieldDef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::FieldDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::FieldDef *)new FileGDBAPI::FieldDef();
  *(FileGDBAPI::FieldDef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1FieldDef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  {
    arg2 = NULL;
    if(jarg2 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg2, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg2_pstr = jenv->GetStringChars(js, 0);
      jint arg2_len = jenv->GetStringLength(js);
      std::wstring arg2_str;
      if (arg2_len) {
        arg2_str.reserve(arg2_len);
        for (jsize i = 0; i < arg2_len; ++i) {
          arg2_str.push_back((wchar_t)arg2_pstr[i]);
        }
      }
      
      arg2 = &arg2_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg2_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg2, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::FieldDef const *)arg1)->GetName(*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg2->data(),arg2->length());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->SetName((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1GetAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  {
    arg2 = NULL;
    if(jarg2 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg2, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg2_pstr = jenv->GetStringChars(js, 0);
      jint arg2_len = jenv->GetStringLength(js);
      std::wstring arg2_str;
      if (arg2_len) {
        arg2_str.reserve(arg2_len);
        for (jsize i = 0; i < arg2_len; ++i) {
          arg2_str.push_back((wchar_t)arg2_pstr[i]);
        }
      }
      
      arg2 = &arg2_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg2_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg2, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::FieldDef const *)arg1)->GetAlias(*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg2->data(),arg2->length());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1SetAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->SetAlias((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  FileGDBAPI::FieldType *arg2 = 0 ;
  FileGDBAPI::FieldType temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (FileGDBAPI::FieldType)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::FieldDef const *)arg1)->GetType(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1SetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  FileGDBAPI::FieldType arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  arg2 = (FileGDBAPI::FieldType)jarg2; 
  result = (fgdbError)(arg1)->SetType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::FieldDef const *)arg1)->GetLength(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1SetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  int arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (fgdbError)(arg1)->SetLength(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1GetIsNullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::FieldDef const *)arg1)->GetIsNullable(*arg2);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1SetIsNullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  bool arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (fgdbError)(arg1)->SetIsNullable(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1GetGeometryDef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  FileGDBAPI::GeometryDef *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  arg2 = *(FileGDBAPI::GeometryDef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::GeometryDef & reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::FieldDef const *)arg1)->GetGeometryDef(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldDef_1SetGeometryDef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::FieldDef *arg1 = (FileGDBAPI::FieldDef *) 0 ;
  FileGDBAPI::GeometryDef *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::FieldDef **)&jarg1; 
  arg2 = *(FileGDBAPI::GeometryDef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::GeometryDef const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetGeometryDef((FileGDBAPI::GeometryDef const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1IndexDef_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::IndexDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::IndexDef *)new FileGDBAPI::IndexDef();
  *(FileGDBAPI::IndexDef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1IndexDef_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  bool arg3 ;
  FileGDBAPI::IndexDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  result = (FileGDBAPI::IndexDef *)new FileGDBAPI::IndexDef((std::wstring const &)*arg1,(std::wstring const &)*arg2,arg3);
  *(FileGDBAPI::IndexDef **)&jresult = result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1IndexDef_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::IndexDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (FileGDBAPI::IndexDef *)new FileGDBAPI::IndexDef((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  *(FileGDBAPI::IndexDef **)&jresult = result; 
  {
    
  }
  {
    
  }
  
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1IndexDef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::IndexDef *arg1 = (FileGDBAPI::IndexDef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::IndexDef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDef_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::IndexDef *arg1 = (FileGDBAPI::IndexDef *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::IndexDef **)&jarg1; 
  {
    arg2 = NULL;
    if(jarg2 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg2, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg2_pstr = jenv->GetStringChars(js, 0);
      jint arg2_len = jenv->GetStringLength(js);
      std::wstring arg2_str;
      if (arg2_len) {
        arg2_str.reserve(arg2_len);
        for (jsize i = 0; i < arg2_len; ++i) {
          arg2_str.push_back((wchar_t)arg2_pstr[i]);
        }
      }
      
      arg2 = &arg2_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg2_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg2, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::IndexDef const *)arg1)->GetName(*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg2->data(),arg2->length());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDef_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::IndexDef *arg1 = (FileGDBAPI::IndexDef *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::IndexDef **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->SetName((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDef_1GetFields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::IndexDef *arg1 = (FileGDBAPI::IndexDef *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::IndexDef **)&jarg1; 
  {
    arg2 = NULL;
    if(jarg2 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg2, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg2_pstr = jenv->GetStringChars(js, 0);
      jint arg2_len = jenv->GetStringLength(js);
      std::wstring arg2_str;
      if (arg2_len) {
        arg2_str.reserve(arg2_len);
        for (jsize i = 0; i < arg2_len; ++i) {
          arg2_str.push_back((wchar_t)arg2_pstr[i]);
        }
      }
      
      arg2 = &arg2_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg2_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg2, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::IndexDef const *)arg1)->GetFields(*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg2->data(),arg2->length());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDef_1SetFields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::IndexDef *arg1 = (FileGDBAPI::IndexDef *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::IndexDef **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->SetFields((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDef_1GetIsUnique(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::IndexDef *arg1 = (FileGDBAPI::IndexDef *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::IndexDef **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::IndexDef const *)arg1)->GetIsUnique(*arg2);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_IndexDef_1SetIsUnique(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::IndexDef *arg1 = (FileGDBAPI::IndexDef *) 0 ;
  bool arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::IndexDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (fgdbError)(arg1)->SetIsUnique(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldInfo_1GetFieldCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::FieldInfo const *)arg1)->GetFieldCount(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldInfo_1GetFieldName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    arg3 = NULL;
    if(jarg3 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg3, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg3_pstr = jenv->GetStringChars(js, 0);
      jint arg3_len = jenv->GetStringLength(js);
      std::wstring arg3_str;
      if (arg3_len) {
        arg3_str.reserve(arg3_len);
        for (jsize i = 0; i < arg3_len; ++i) {
          arg3_str.push_back((wchar_t)arg3_pstr[i]);
        }
      }
      
      arg3 = &arg3_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg3_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg3, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)((FileGDBAPI::FieldInfo const *)arg1)->GetFieldName(arg2,*arg3);
  jresult = (jint)result; 
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg3->data(),arg3->length());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
    }  
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldInfo_1GetFieldType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jintArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  FileGDBAPI::FieldType *arg3 = 0 ;
  FileGDBAPI::FieldType temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (FileGDBAPI::FieldType)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::FieldInfo const *)arg1)->GetFieldType(arg2,*arg3);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldInfo_1GetFieldLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jintArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (int)0;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::FieldInfo const *)arg1)->GetFieldLength(arg2,*arg3);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FieldInfo_1GetFieldIsNullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbooleanArray jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = false;
    arg3 = &temp3; 
  }
  result = (fgdbError)((FileGDBAPI::FieldInfo const *)arg1)->GetFieldIsNullable(arg2,*arg3);
  jresult = (jint)result; 
  {
    jboolean jvalue = (jboolean)temp3;
    jenv->SetBooleanArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1FieldInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::FieldInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::FieldInfo *)new FileGDBAPI::FieldInfo();
  *(FileGDBAPI::FieldInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1FieldInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1ShapeBuffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  FileGDBAPI::ShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (FileGDBAPI::ShapeBuffer *)new FileGDBAPI::ShapeBuffer(arg1);
  *(FileGDBAPI::ShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1ShapeBuffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::ShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::ShapeBuffer *)new FileGDBAPI::ShapeBuffer();
  *(FileGDBAPI::ShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1ShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  result = (bool)((FileGDBAPI::ShapeBuffer const *)arg1)->IsEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1SetEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  (arg1)->SetEmpty();
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1GetShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType *arg2 = 0 ;
  FileGDBAPI::ShapeType temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (FileGDBAPI::ShapeType)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::ShapeBuffer const *)arg1)->GetShapeType(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1GetGeometryType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  FileGDBAPI::GeometryType *arg2 = 0 ;
  FileGDBAPI::GeometryType temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (FileGDBAPI::GeometryType)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::ShapeBuffer const *)arg1)->GetGeometryType(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1HasZs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasZs(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1HasMs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasMs(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1HasIDs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasIDs(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1HasCurves(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasCurves(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1HasNormals(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasNormals(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1HasTextures(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasTextures(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1HasMaterials(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasMaterials(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1GetGeometryType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  FileGDBAPI::GeometryType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (FileGDBAPI::GeometryType)FileGDBAPI::ShapeBuffer::GetGeometryType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1setBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  byte *arg2 = (byte *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    if (jarg2) {
      jsize size = (jsize) jenv->GetArrayLength(jarg2);
      if((arg1)->allocatedLength<size){
        (arg1)->Allocate(size);
      }
      jenv->GetByteArrayRegion(jarg2, 0, size, (jbyte *)(arg1)->shapeBuffer);
      (arg1)->inUseLength=size;
    }else{
      (arg1)->inUseLength=0;
    }
  }
  FileGDBAPI_ShapeBuffer_setBuffer(arg1,arg2);
}


SWIGEXPORT jbyteArray JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ShapeBuffer_1getBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  byte *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  result = (byte *)FileGDBAPI_ShapeBuffer_getBuffer(arg1);
  {
    jresult = jenv->NewByteArray((jsize)arg1->inUseLength);
    jenv->SetByteArrayRegion(jresult, 0, (jsize)arg1->inUseLength, (jbyte *)arg1->shapeBuffer);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_PointShapeBuffer_1GetPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  FileGDBAPI::Point **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  arg2 = *(FileGDBAPI::Point ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Point *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::PointShapeBuffer const *)arg1)->GetPoint(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_PointShapeBuffer_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::PointShapeBuffer const *)arg1)->GetZ(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_PointShapeBuffer_1GetM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::PointShapeBuffer const *)arg1)->GetM(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_PointShapeBuffer_1GetID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  arg2 = *(int ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::PointShapeBuffer const *)arg1)->GetID(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_PointShapeBuffer_1Setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  result = (fgdbError)(arg1)->Setup(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1PointShapeBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::PointShapeBuffer *)new FileGDBAPI::PointShapeBuffer();
  *(FileGDBAPI::PointShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1PointShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1GetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPointShapeBuffer const *)arg1)->GetExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1GetNumPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::MultiPointShapeBuffer const *)arg1)->GetNumPoints(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1GetPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  FileGDBAPI::Point **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  arg2 = *(FileGDBAPI::Point ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Point *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPointShapeBuffer const *)arg1)->GetPoints(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1GetZExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPointShapeBuffer const *)arg1)->GetZExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1GetZs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPointShapeBuffer const *)arg1)->GetZs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1GetMExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPointShapeBuffer const *)arg1)->GetMExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1GetMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPointShapeBuffer const *)arg1)->GetMs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1GetIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  arg2 = *(int ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPointShapeBuffer const *)arg1)->GetIDs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1Setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1CalculateExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  result = (fgdbError)(arg1)->CalculateExtent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1MultiPointShapeBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::MultiPointShapeBuffer *)new FileGDBAPI::MultiPointShapeBuffer();
  *(FileGDBAPI::MultiPointShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1MultiPointShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetNumParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetNumParts(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetNumPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetNumPoints(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = *(int ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetParts(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  FileGDBAPI::Point **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = *(FileGDBAPI::Point ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Point *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetPoints(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetZExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetZExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetZs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetZs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetMExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetMExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetMs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetNumCurves(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetNumCurves(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetCurves(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  byte **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = *(byte ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "byte *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetCurves(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1GetIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = *(int ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPartShapeBuffer const *)arg1)->GetIDs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1Setup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1Setup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1CalculateExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  result = (fgdbError)(arg1)->CalculateExtent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1PackCurves(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  result = (fgdbError)(arg1)->PackCurves();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1MultiPartShapeBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::MultiPartShapeBuffer *)new FileGDBAPI::MultiPartShapeBuffer();
  *(FileGDBAPI::MultiPartShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1MultiPartShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetNumParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetNumParts(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetNumPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetNumPoints(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(int ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetParts(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetPartDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(int ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetPartDescriptors(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::Point **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(FileGDBAPI::Point ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Point *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetPoints(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetZExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetZExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetZs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetZs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetMExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetMExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(double ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetMs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(int ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetIDs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetNormals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  float **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = *(float ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetNormals(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetTextures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int **arg4 = 0 ;
  float **arg5 = 0 ;
  int temp2 ;
  int temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (int)0;
    arg3 = &temp3; 
  }
  arg4 = *(int ***)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return 0;
  } 
  arg5 = *(float ***)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetTextures(*arg2,*arg3,*arg4,*arg5);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1GetMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int **arg4 = 0 ;
  byte **arg5 = 0 ;
  int temp2 ;
  int temp3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (int)0;
    arg3 = &temp3; 
  }
  arg4 = *(int ***)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return 0;
  } 
  arg5 = *(byte ***)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "byte *& reference is null");
    return 0;
  } 
  result = (fgdbError)((FileGDBAPI::MultiPatchShapeBuffer const *)arg1)->GetMaterials(*arg2,*arg3,*arg4,*arg5);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1Setup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  size_t arg8 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (size_t)jarg8; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1Setup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1Setup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1Setup_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1Setup_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1CalculateExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  result = (fgdbError)(arg1)->CalculateExtent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1MultiPatchShapeBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::MultiPatchShapeBuffer *)new FileGDBAPI::MultiPatchShapeBuffer();
  *(FileGDBAPI::MultiPatchShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1MultiPatchShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1ByteArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  FileGDBAPI::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (FileGDBAPI::ByteArray *)new FileGDBAPI::ByteArray(arg1);
  *(FileGDBAPI::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1ByteArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::ByteArray *)new FileGDBAPI::ByteArray();
  *(FileGDBAPI::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1ByteArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ByteArray_1setBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  byte *arg2 = (byte *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  {
    if (jarg2) {
      jsize size = (jsize) jenv->GetArrayLength(jarg2);
      if((arg1)->allocatedLength<size){
        (arg1)->Allocate(size);
      }
      jenv->GetByteArrayRegion(jarg2, 0, size, (jbyte *)(arg1)->byteArray);
      (arg1)->inUseLength=size;
    }else{
      (arg1)->inUseLength=0;
    }
  }
  FileGDBAPI_ByteArray_setBuffer(arg1,arg2);
}


SWIGEXPORT jbyteArray JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ByteArray_1getBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  byte *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  result = (byte *)FileGDBAPI_ByteArray_getBuffer(arg1);
  {
    jresult = jenv->NewByteArray((jsize)arg1->inUseLength);
    jenv->SetByteArrayRegion(jresult, 0, (jsize)arg1->inUseLength, (jbyte *)arg1->byteArray);
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (bool)((FileGDBAPI::Envelope const *)arg1)->IsEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1SetEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  (arg1)->SetEmpty();
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1Envelope_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Envelope *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Envelope *)new FileGDBAPI::Envelope();
  *(FileGDBAPI::Envelope **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1Envelope_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  FileGDBAPI::Envelope *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (FileGDBAPI::Envelope *)new FileGDBAPI::Envelope(arg1,arg2,arg3,arg4);
  *(FileGDBAPI::Envelope **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1Envelope(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1xMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xMin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1xMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->xMin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1yMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yMin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1yMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->yMin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1xMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xMax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1xMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->xMax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1yMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yMax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1yMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->yMax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1zMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->zMin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1zMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->zMin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1zMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->zMax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Envelope_1zMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->zMax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Point_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Point_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Point_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Point_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1Point(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Point *)new FileGDBAPI::Point();
  *(FileGDBAPI::Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1Point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1Curve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Curve *arg1 = (FileGDBAPI::Curve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Curve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Curve_1startPointIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::Curve *arg1 = (FileGDBAPI::Curve *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Curve **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->startPointIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Curve_1startPointIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Curve *arg1 = (FileGDBAPI::Curve *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Curve **)&jarg1; 
  result = (int) ((arg1)->startPointIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Curve_1curveType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::Curve *arg1 = (FileGDBAPI::Curve *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Curve **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->curveType = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Curve_1curveType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Curve *arg1 = (FileGDBAPI::Curve *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Curve **)&jarg1; 
  result = (int) ((arg1)->curveType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Curve_1GetCurveType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Curve *arg1 = (FileGDBAPI::Curve *) 0 ;
  FileGDBAPI::CurveType *arg2 = 0 ;
  FileGDBAPI::CurveType temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Curve **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (FileGDBAPI::CurveType)0;
    arg2 = &temp2; 
  }
  result = (fgdbError)((FileGDBAPI::Curve const *)arg1)->GetCurveType(*arg2);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_CircularArcCurve_1centerPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FileGDBAPI::CircularArcCurve *arg1 = (FileGDBAPI::CircularArcCurve *) 0 ;
  FileGDBAPI::Point *arg2 = (FileGDBAPI::Point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::CircularArcCurve **)&jarg1; 
  arg2 = *(FileGDBAPI::Point **)&jarg2; 
  if (arg1) (arg1)->centerPoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_CircularArcCurve_1centerPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::CircularArcCurve *arg1 = (FileGDBAPI::CircularArcCurve *) 0 ;
  FileGDBAPI::Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::CircularArcCurve **)&jarg1; 
  result = (FileGDBAPI::Point *)& ((arg1)->centerPoint);
  *(FileGDBAPI::Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_CircularArcCurve_1angles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::CircularArcCurve *arg1 = (FileGDBAPI::CircularArcCurve *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::CircularArcCurve **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->angles;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_CircularArcCurve_1angles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::CircularArcCurve *arg1 = (FileGDBAPI::CircularArcCurve *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::CircularArcCurve **)&jarg1; 
  result = (double *)(double *) ((arg1)->angles);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_CircularArcCurve_1bits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::CircularArcCurve *arg1 = (FileGDBAPI::CircularArcCurve *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::CircularArcCurve **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bits = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_CircularArcCurve_1bits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::CircularArcCurve *arg1 = (FileGDBAPI::CircularArcCurve *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::CircularArcCurve **)&jarg1; 
  result = (int) ((arg1)->bits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1CircularArcCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::CircularArcCurve *arg1 = (FileGDBAPI::CircularArcCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::CircularArcCurve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_BezierCurve_1controlPoints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FileGDBAPI::BezierCurve *arg1 = (FileGDBAPI::BezierCurve *) 0 ;
  FileGDBAPI::Point *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::BezierCurve **)&jarg1; 
  arg2 = *(FileGDBAPI::Point **)&jarg2; 
  {
    size_t ii;
    FileGDBAPI::Point *b = (FileGDBAPI::Point *) arg1->controlPoints;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((FileGDBAPI::Point *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_BezierCurve_1controlPoints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::BezierCurve *arg1 = (FileGDBAPI::BezierCurve *) 0 ;
  FileGDBAPI::Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::BezierCurve **)&jarg1; 
  result = (FileGDBAPI::Point *)(FileGDBAPI::Point *) ((arg1)->controlPoints);
  *(FileGDBAPI::Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1BezierCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::BezierCurve *arg1 = (FileGDBAPI::BezierCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::BezierCurve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1centerPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  FileGDBAPI::Point *arg2 = (FileGDBAPI::Point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  arg2 = *(FileGDBAPI::Point **)&jarg2; 
  if (arg1) (arg1)->centerPoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1centerPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  FileGDBAPI::Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  result = (FileGDBAPI::Point *)& ((arg1)->centerPoint);
  *(FileGDBAPI::Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1vs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->vs;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1vs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  result = (double *)(double *) ((arg1)->vs);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1rotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1rotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  result = (double) ((arg1)->rotation);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1fromV_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fromV = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1fromV_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  result = (double) ((arg1)->fromV);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1semiMajor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->semiMajor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1semiMajor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  result = (double) ((arg1)->semiMajor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1minorMajorRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minorMajorRatio = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1minorMajorRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  result = (double) ((arg1)->minorMajorRatio);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1deltaV_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->deltaV = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1deltaV_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  result = (double) ((arg1)->deltaV);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1bits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bits = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1bits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  result = (int) ((arg1)->bits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1EllipticArcCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::EllipticArcCurve *arg1 = (FileGDBAPI::EllipticArcCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::EllipticArcCurve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1Guid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Guid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Guid *)new FileGDBAPI::Guid();
  *(FileGDBAPI::Guid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1Guid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1SetNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  (arg1)->SetNull();
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1Create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  (arg1)->Create();
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1FromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->FromString((std::wstring const &)*arg2);
  jresult = (jint)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  {
    arg2 = NULL;
    if(jarg2 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg2, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg2_pstr = jenv->GetStringChars(js, 0);
      jint arg2_len = jenv->GetStringLength(js);
      std::wstring arg2_str;
      if (arg2_len) {
        arg2_str.reserve(arg2_len);
        for (jsize i = 0; i < arg2_len; ++i) {
          arg2_str.push_back((wchar_t)arg2_pstr[i]);
        }
      }
      
      arg2 = &arg2_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg2_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg2, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)(arg1)->ToString(*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg2->data(),arg2->length());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
    }  
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  FileGDBAPI::Guid *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = *(FileGDBAPI::Guid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator ==((FileGDBAPI::Guid const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1notEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  FileGDBAPI::Guid *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = *(FileGDBAPI::Guid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator !=((FileGDBAPI::Guid const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1data1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->data1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1data1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  result = (uint32) ((arg1)->data1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1data2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->data2 = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1data2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  result = (uint16) ((arg1)->data2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1data3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->data3 = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1data3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  result = (uint16) ((arg1)->data3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1data4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  byte *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = *(byte **)&jarg2; 
  {
    size_t ii;
    byte *b = (byte *) arg1->data4;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((byte *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_Guid_1data4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  byte *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  result = (byte *)(byte *) ((arg1)->data4);
  *(byte **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GetErrorDescription(JNIEnv *jenv, jclass jcls, jint jarg1, jobject jarg2) {
  jint jresult = 0 ;
  fgdbError arg1 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (fgdbError)jarg1; 
  {
    arg2 = NULL;
    if(jarg2 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg2, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg2_pstr = jenv->GetStringChars(js, 0);
      jint arg2_len = jenv->GetStringLength(js);
      std::wstring arg2_str;
      if (arg2_len) {
        arg2_str.reserve(arg2_len);
        for (jsize i = 0; i < arg2_len; ++i) {
          arg2_str.push_back((wchar_t)arg2_pstr[i]);
        }
      }
      
      arg2 = &arg2_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg2_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg2, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)FileGDBAPI::ErrorInfo::GetErrorDescription(arg1,*arg2);
  jresult = (jint)result; 
  {
    if(arg2 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg2->data(),arg2->length());
      jclass sbufClass = jenv->GetObjectClass(jarg2);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg2, appendStringID, newString);
    }  
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GetErrorRecordCount(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  int *arg1 = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp1 = (int)0;
    arg1 = &temp1; 
  }
  FileGDBAPI::ErrorInfo::GetErrorRecordCount(*arg1);
  {
    jint jvalue = (jint)temp1;
    jenv->SetIntArrayRegion(jarg1, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_GetErrorRecord(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2, jobject jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  fgdbError *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError temp2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (fgdbError)0;
    arg2 = &temp2; 
  }
  {
    arg3 = NULL;
    if(jarg3 != NULL) {
      /* Get the String from the StringBuffer */
      jmethodID setLengthID;
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID toStringID = jenv->GetMethodID(sbufClass, "toString", "()Ljava/lang/String;");
      jstring js = (jstring) jenv->CallObjectMethod(jarg3, toStringID);
      
      /* Convert the String to a C string */
      const jchar *arg3_pstr = jenv->GetStringChars(js, 0);
      jint arg3_len = jenv->GetStringLength(js);
      std::wstring arg3_str;
      if (arg3_len) {
        arg3_str.reserve(arg3_len);
        for (jsize i = 0; i < arg3_len; ++i) {
          arg3_str.push_back((wchar_t)arg3_pstr[i]);
        }
      }
      
      arg3 = &arg3_str;
      /* Release the string we obtained with GetStringChars */
      jenv->ReleaseStringChars(js, arg3_pstr);
      
      /* Zero the original StringBuffer, so we can replace it with the result */
      setLengthID = jenv->GetMethodID(sbufClass, "setLength", "(I)V");
      jenv->CallVoidMethod(jarg3, setLengthID, (jint) 0);
    }
  }
  result = (fgdbError)FileGDBAPI::ErrorInfo::GetErrorRecord(arg1,*arg2,*arg3);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    if(arg3 != NULL) {
      /* Append the result to the empty StringBuffer */
      jstring newString = jenv->NewString((const jchar *)arg3->data(),arg3->length());
      jclass sbufClass = jenv->GetObjectClass(jarg3);
      jmethodID appendStringID = jenv->GetMethodID(sbufClass, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
      jenv->CallObjectMethod(jarg3, appendStringID, newString);
    }  
  }
  
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ClearErrors(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  FileGDBAPI::ErrorInfo::ClearErrors();
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReferenceInfo_1auth_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->auth_name = *arg2;
  {
    
  }
  
}


SWIGEXPORT jstring JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReferenceInfo_1auth_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  result = (std::wstring *) & ((arg1)->auth_name);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReferenceInfo_1auth_1srid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->auth_srid = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReferenceInfo_1auth_1srid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  result = (int) ((arg1)->auth_srid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReferenceInfo_1srtext_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->srtext = *arg2;
  {
    
  }
  
}


SWIGEXPORT jstring JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReferenceInfo_1srtext_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  result = (std::wstring *) & ((arg1)->srtext);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReferenceInfo_1srname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->srname = *arg2;
  {
    
  }
  
}


SWIGEXPORT jstring JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_SpatialReferenceInfo_1srname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  result = (std::wstring *) & ((arg1)->srname);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1SpatialReferenceInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::SpatialReferenceInfo *)new FileGDBAPI::SpatialReferenceInfo();
  *(FileGDBAPI::SpatialReferenceInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1SpatialReferenceInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1EnumSpatialReferenceInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::EnumSpatialReferenceInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::EnumSpatialReferenceInfo *)new FileGDBAPI::EnumSpatialReferenceInfo();
  *(FileGDBAPI::EnumSpatialReferenceInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1EnumSpatialReferenceInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::EnumSpatialReferenceInfo *arg1 = (FileGDBAPI::EnumSpatialReferenceInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::EnumSpatialReferenceInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EnumSpatialReferenceInfo_1NextGeographicSpatialReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::EnumSpatialReferenceInfo *arg1 = (FileGDBAPI::EnumSpatialReferenceInfo *) 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumSpatialReferenceInfo **)&jarg1; 
  arg2 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReferenceInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->NextGeographicSpatialReference(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EnumSpatialReferenceInfo_1NextProjectedSpatialReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::EnumSpatialReferenceInfo *arg1 = (FileGDBAPI::EnumSpatialReferenceInfo *) 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumSpatialReferenceInfo **)&jarg1; 
  arg2 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReferenceInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->NextProjectedSpatialReference(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EnumSpatialReferenceInfo_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::EnumSpatialReferenceInfo *arg1 = (FileGDBAPI::EnumSpatialReferenceInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EnumSpatialReferenceInfo **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FindSpatialReferenceBySRID(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  int arg1 ;
  FileGDBAPI::SpatialReferenceInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReferenceInfo & reference is null");
    return 0;
  } 
  result = (bool)FileGDBAPI::SpatialReferences::FindSpatialReferenceBySRID(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_FindSpatialReferenceByName(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReferenceInfo & reference is null");
    return 0;
  } 
  result = (bool)FileGDBAPI::SpatialReferences::FindSpatialReferenceByName((std::wstring const &)*arg1,*arg2);
  jresult = (jboolean)result; 
  {
    
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1Raster(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Raster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Raster *)new FileGDBAPI::Raster();
  *(FileGDBAPI::Raster **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1Raster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Raster *arg1 = (FileGDBAPI::Raster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Raster **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1sec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ce_time *arg1 = (ce_time *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tm_sec = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ce_time *arg1 = (ce_time *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  result = (int) ((arg1)->tm_sec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ce_time *arg1 = (ce_time *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tm_min = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ce_time *arg1 = (ce_time *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  result = (int) ((arg1)->tm_min);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1hour_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ce_time *arg1 = (ce_time *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tm_hour = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1hour_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ce_time *arg1 = (ce_time *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  result = (int) ((arg1)->tm_hour);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1mday_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ce_time *arg1 = (ce_time *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tm_mday = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1mday_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ce_time *arg1 = (ce_time *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  result = (int) ((arg1)->tm_mday);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1mon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ce_time *arg1 = (ce_time *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tm_mon = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1mon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ce_time *arg1 = (ce_time *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  result = (int) ((arg1)->tm_mon);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ce_time *arg1 = (ce_time *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tm_year = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ce_time *arg1 = (ce_time *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  result = (int) ((arg1)->tm_year);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1wday_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ce_time *arg1 = (ce_time *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tm_wday = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1wday_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ce_time *arg1 = (ce_time *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  result = (int) ((arg1)->tm_wday);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1yday_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ce_time *arg1 = (ce_time *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tm_yday = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1yday_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ce_time *arg1 = (ce_time *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  result = (int) ((arg1)->tm_yday);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1isdst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ce_time *arg1 = (ce_time *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tm_isdst = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_ce_1time_1tm_1isdst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ce_time *arg1 = (ce_time *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ce_time **)&jarg1; 
  result = (int) ((arg1)->tm_isdst);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_new_1ce_1time(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ce_time *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ce_time *)new ce_time();
  *(ce_time **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_delete_1ce_1time(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ce_time *arg1 = (ce_time *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ce_time **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_PointShapeBuffer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::ShapeBuffer **)&baseptr = *(FileGDBAPI::PointShapeBuffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPointShapeBuffer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::ShapeBuffer **)&baseptr = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPartShapeBuffer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::ShapeBuffer **)&baseptr = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_MultiPatchShapeBuffer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::ShapeBuffer **)&baseptr = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_CircularArcCurve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::Curve **)&baseptr = *(FileGDBAPI::CircularArcCurve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_BezierCurve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::Curve **)&baseptr = *(FileGDBAPI::BezierCurve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_ehi_fgdb4j_jni_fgbd4jJNI_EllipticArcCurve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::Curve **)&baseptr = *(FileGDBAPI::EllipticArcCurve **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

